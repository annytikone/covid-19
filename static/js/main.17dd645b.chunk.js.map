{"version":3,"sources":["components/Cards.jsx","components/IndiaCard.jsx","components/WorldStatTable.jsx","components/Icons.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","color","height","alignItems","justifyContent","marginTop","spacing","backgroundColor","icon","marginRight","card","maxHeight","flexDirection","minWidth","marginLeft","float","width","position","borderRadius","boxSizing","cardMedia","paddingTop","paddingButtom","cardContent","flexGrow","Cards","classes","useState","stats","handleStats","useEffect","FetchData","a","fetch","data","json","console","log","formatter","Intl","NumberFormat","format","cases","Fragment","CssBaseline","Container","className","cardGrid","maxWidth","Grid","container","justify","Card","variant","elevation","CardContent","CardMedia","align","Typography","style","fontSize","Divider","deaths","recovered","tests","active","affectedCountries","todayCases","todayDeaths","critical","WorldTable","props","state","loading","getMuiTheme","createMuiTheme","overrides","MUIDataTable","paper","boxShadow","MUIDataTableBodyCell","tableRef","React","createRef","this","setState","then","response","res","catch","error","title","isLoading","columns","name","label","options","filter","sort","rowHover","downloadOptions","filename","separator","filterType","selectableRows","responsive","Component","network","bgColor","url","target","AppBar","Toolbar","App","Navbar","Icons","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.17dd645b.chunk.js","sourcesContent":["//importing packages starts here\nimport React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        color: 'white',\n        height: '70px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: theme.spacing(8),\n        backgroundColor: '#9b0101',\n    },\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n\n    card: {\n        maxHeight: '200%',\n        display: 'block',\n        flexDirection: 'column',\n        minWidth: '300px',\n        marginLeft: '13.5px',\n        marginRight: '13.5px',\n        float: 'right',\n        width: '100px',\n        position: 'center',\n        borderRadius: '7px',\n        justifyContent: 'space-evenly',\n        boxSizing: 'border-box',\n\n\n    },\n    cardMedia: {\n        paddingTop: '6.25%',\n        paddingButtom: '6.25%'\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n\n}));\n\nexport default function Cards() {\n    const classes = useStyles();\n    const [stats, handleStats] = useState([]);\n    useEffect(() => {\n        FetchData()\n    }, [])\n\n    //data fetching from the api\n    const FetchData = async () => {\n        const data = await fetch('https://corona.lmao.ninja/v2/all'); //data source\n        const stats = await data.json()\n        console.log(stats)\n        handleStats(stats)\n    }\n\n    const formatter = new Intl.NumberFormat('en')\n    console.log(\"formater\", formatter.format(stats.cases))\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <main>\n                {/* Card starts here */}\n                <Container className={classes.cardGrid} maxWidth=\"600px\">\n                    <br /><br />\n                    <Grid container spacing={0} justify=\"space-evenly\">\n\n                        <Card className={classes.card} variant=\"outlined\" elevation={3}>\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        TOTAL CASES\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n                                        {formatter.format(stats.cases)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n\n                        <Card className={classes.card} variant=\"outlined\">\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        TOTAL DEATHS\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n                                        {formatter.format(stats.deaths)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n\n                        <Card className={classes.card} variant=\"outlined\">\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        TOTAL RECOVERED\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n                                        {formatter.format(stats.recovered)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <br />\n                    <Grid container spacing={0} justify=\"space-evenly\">\n                        <Card className={classes.card} variant=\"outlined\">\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        TOTAL TESTS\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n                                        {formatter.format(stats.tests)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n                        <Card className={classes.card} variant=\"outlined\">\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        TOTAL ACTIVE CASES\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n                                        {formatter.format(stats.active)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n                        <Card className={classes.card} variant=\"outlined\">\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        AFFECTED COUNTRIES\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 40 }}>\n\n                                        {formatter.format(stats.affectedCountries)}\n                                    </Typography>\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <br /><br />\n                </Container>\n                {/* Card ends here */}\n            </main>\n        </React.Fragment>\n    );\n}\n\n\n\n\n\n\n\n","//importing packages starts here\nimport React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n//importing packages ends here\n\n//component styling starts here\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        color: 'white',\n        height: '70px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: theme.spacing(8),\n        backgroundColor: '#01579b'\n    },\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n\n    card: {\n        maxHeight: '70%',\n        display: 'block',\n        flexDirection: 'column',\n        minWidth: '300px',\n        marginLeft: '20.5px',\n        marginRight: '20.5px',\n        float: 'right',\n        width: '1200px',\n        position: 'center',\n        borderRadius: '5px',\n        justifyContent: 'space-evenly',\n        boxSizing: 'border-box'\n\n    },\n    cardMedia: {\n        paddingTop: '4.25%', // 16:9\n        paddingButtom: '4.25%'\n    },\n    cardContent: {\n        flexGrow: 0,\n    },\n\n}));\n//component styling ends here\n\n//function starts here\nexport default function Cards() {\n    const classes = useStyles();\n    const [stats, handleStats] = useState([]);\n    useEffect(() => {\n        FetchData()\n    }, [])\n\n    //data fetching from the api\n    const FetchData = async () => {\n        const data = await fetch('https://corona.lmao.ninja/v2/countries/India'); //data source\n        const stats = await data.json();\n        handleStats(stats)\n    }\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <main>\n                {/* Card starts here */}\n                <Container className={classes.cardGrid} maxWidth=\"600px\">\n                    <br /><br />\n                    <Grid container spacing={15} justify=\"space-evenly\">\n\n                        <Card className={classes.card} variant=\"outlined\" elevation={3}>\n                            <CardContent className={classes.cardContent}>\n                                <CardMedia className={classes.cardMedia} align=\"center\" >\n                                    <Typography color=\"secondary\" style={{ fontSize: 25 }}>\n                                        India\n                      </Typography>\n                                    <Divider />\n                                    <Typography color=\"primary\" style={{ fontSize: 20 }}>\n\n                                        Total Cases ({stats.cases}), Cases Today ({stats.todayCases}), Total Deaths ({stats.deaths}), Deaths Today ({stats.todayDeaths}), Recovered Patients ({stats.recovered}), Active ({stats.active}), Critical Patients ({stats.critical})\n\n                      </Typography>\n\n                                </CardMedia>\n                            </CardContent>\n                        </Card>\n\n\n                    </Grid>\n                    <br /><br />\n                </Container>\n                {/* Card ends here */}\n            </main>\n        </React.Fragment>\n    );\n}\n","import React from \"react\"\nimport MUIDataTable from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\n\n\nclass WorldTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tableRef = React.createRef();\n    }\n    state = {\n        stats: [],\n        loading: false\n    }\n\n    getMuiTheme = () => createMuiTheme({\n        overrides: {\n            MUIDataTable: {\n                root: {\n                    backgroundColor: \"#FF000\"\n                },\n                paper: {\n                    boxShadow: \"none\"\n                }\n            },\n            MUIDataTableBodyCell: {\n                root: {\n                    backgroundColor: \"white\"\n                }\n            }\n        }\n    })\n\n    componentDidMount() {\n        this.setState({ loading: true })\n        fetch('https://corona.lmao.ninja/v2/countries?yesterday=true&sort=cases&allowNull=true') //data source\n            .then(response => response.json())\n            .then(res => {\n                this.setState({ stats: res, loading: false }, () => console.log(res))\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n\n\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n                    <br />\n\n                    <MuiThemeProvider theme={this.getMuiTheme()}>\n                        <MUIDataTable\n                            title={<h1 style={{ float: 'left', color: '#3f51b5', }}>World Wide Corona Stats</h1>}\n                            isLoading={this.state.loading}\n                            columns={[\n                                {\n                                    name: \"country\",\n                                    label: \"Country\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"cases\",\n                                    label: \"Total Cases\",\n                                    options: {\n                                        filter: true,\n                                        sort: true,\n                                    }\n                                },\n                                {\n                                    name: \"todayCases\",\n                                    label: \"Current Cases\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"deaths\",\n                                    label: \"Total Deaths\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"todayDeaths\",\n                                    label: \"Current Deaths\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"recovered\",\n                                    label: \"Recovered Patients\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"active\",\n                                    label: \"Active\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                                {\n                                    name: \"critical\",\n                                    label: \"Critical Patients\",\n                                    options: {\n                                        filter: true,\n                                        sort: false,\n                                    }\n                                },\n                            ]}\n\n                            data={this.state.stats}\n\n                            options={{\n                                filter: true,\n\n                                rowHover: true,\n                                downloadOptions: { filename: 'CovidData.csv', separator: ',' },\n                                //onRowClick:(selectedRow,otherprops)=>{console.log(selectedRow)}, \n                                filterType: 'dropdown',\n                                selectableRows: false,\n                                responsive: 'stacked',\n                            }} />\n                    </MuiThemeProvider>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default WorldTable;\n","import React from 'react';\nimport { SocialIcon } from 'react-social-icons';\nexport default () => {\n    return (<div style={{ color: \"#3f51b5\", float: 'centre' }}>\n        <br />\n        <SocialIcon network=\"linkedin\" bgColor=\"#0e76a8\" url=\"https://www.linkedin.com/in/aniket-tikone-27808a138\" target=\"_blanck\" />\n        {} {} <SocialIcon network=\"github\" bgColor=\"#4078c0\" url=\"https://github.com/annytikone\" target=\"_blanck\" />\n        {} {}<SocialIcon network=\"medium\" bgColor=\"#0000cd\" url=\"https://medium.com/@anikettikone9\" target=\"_blanck\" />\n    </div>\n    )\n}","//importing starts here\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        boxShadow: \"none\",\n        backgroundColor: \"#D3300E\"\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\nconst title = \"COVID-19 CORONAVIRUS PANDEMIC\"\nexport default () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Card from './components/Cards'\nimport India from './components/IndiaCard'\nimport WorldTable from './components/WorldStatTable';\nimport Icons from './components/Icons'\nimport Navbar from './components/Navbar'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Card />\n      <India />\n      <WorldTable />\n      <Icons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}